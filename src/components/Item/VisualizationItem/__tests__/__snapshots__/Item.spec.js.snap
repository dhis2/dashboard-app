// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VisualizationItem/Item renders a DefaultPlugin when an EVENT_CHART is passed 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Item
    classes={Object {}}
    editMode={false}
    item={
      Object {
        "eventChart": Object {
          "id": "evchart1",
          "name": "Test evchart",
        },
        "type": "EVENT_CHART",
      }
    }
    itemFilters={
      Object {
        "brilliance": Array [
          Object {
            "id": 100,
            "name": "100",
          },
        ],
      }
    }
    onToggleItemExpanded={[MockFunction]}
    onVisualizationLoaded={[MockFunction]}
    visualization={
      Object {
        "columns": Array [],
        "description": "vis description",
        "filters": Array [],
        "id": "vis id",
        "name": "vis name",
        "rows": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          actionButtons={
            <ItemHeaderButtons
              activeFooter={false}
              activeType="EVENT_CHART"
              d2={Object {}}
              item={
                Object {
                  "eventChart": Object {
                    "id": "evchart1",
                    "name": "Test evchart",
                  },
                  "type": "EVENT_CHART",
                }
              }
              onSelectActiveType={[Function]}
              onToggleFooter={[Function]}
              visualization={
                Object {
                  "columns": Array [],
                  "description": "vis description",
                  "filters": Array [],
                  "id": "vis id",
                  "name": "vis name",
                  "rows": Array [],
                }
              }
            />
          }
          title="rainbow"
        />,
        <FatalErrorBoundary>
          <div
            className="dashboard-item-content"
          />
        </FatalErrorBoundary>,
        null,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "actionButtons": <ItemHeaderButtons
            activeFooter={false}
            activeType="EVENT_CHART"
            d2={Object {}}
            item={
              Object {
                "eventChart": Object {
                  "id": "evchart1",
                  "name": "Test evchart",
                },
                "type": "EVENT_CHART",
              }
            }
            onSelectActiveType={[Function]}
            onToggleFooter={[Function]}
            visualization={
              Object {
                "columns": Array [],
                "description": "vis description",
                "filters": Array [],
                "id": "vis id",
                "name": "vis name",
                "rows": Array [],
              }
            }
          />,
          "itemId": undefined,
          "title": "rainbow",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="dashboard-item-content"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": "3",
          "nodeType": "host",
          "props": Object {
            "children": false,
            "className": "dashboard-item-content",
          },
          "ref": [Function],
          "rendered": false,
          "type": "div",
        },
        "type": [Function],
      },
      null,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            actionButtons={
              <ItemHeaderButtons
                activeFooter={false}
                activeType="EVENT_CHART"
                d2={Object {}}
                item={
                  Object {
                    "eventChart": Object {
                      "id": "evchart1",
                      "name": "Test evchart",
                    },
                    "type": "EVENT_CHART",
                  }
                }
                onSelectActiveType={[Function]}
                onToggleFooter={[Function]}
                visualization={
                  Object {
                    "columns": Array [],
                    "description": "vis description",
                    "filters": Array [],
                    "id": "vis id",
                    "name": "vis name",
                    "rows": Array [],
                  }
                }
              />
            }
            title="rainbow"
          />,
          <FatalErrorBoundary>
            <div
              className="dashboard-item-content"
            />
          </FatalErrorBoundary>,
          null,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "actionButtons": <ItemHeaderButtons
              activeFooter={false}
              activeType="EVENT_CHART"
              d2={Object {}}
              item={
                Object {
                  "eventChart": Object {
                    "id": "evchart1",
                    "name": "Test evchart",
                  },
                  "type": "EVENT_CHART",
                }
              }
              onSelectActiveType={[Function]}
              onToggleFooter={[Function]}
              visualization={
                Object {
                  "columns": Array [],
                  "description": "vis description",
                  "filters": Array [],
                  "id": "vis id",
                  "name": "vis name",
                  "rows": Array [],
                }
              }
            />,
            "itemId": undefined,
            "title": "rainbow",
          },
          "ref": Object {
            "current": null,
          },
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="dashboard-item-content"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": "3",
            "nodeType": "host",
            "props": Object {
              "children": false,
              "className": "dashboard-item-content",
            },
            "ref": [Function],
            "rendered": false,
            "type": "div",
          },
          "type": [Function],
        },
        null,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "context": Object {
      "d2": Object {},
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
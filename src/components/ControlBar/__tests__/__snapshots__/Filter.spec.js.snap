// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Filter matches the snapshot when name property is empty 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Filter
    classes={Object {}}
    name="rainbow"
    onChangeName={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "className": undefined,
      "endAdornment": <WithStyles(WithFormControlContext(InputAdornment))
        position="end"
      >
        <ClearButton
          onClear={[Function]}
        />
      </WithStyles(WithFormControlContext(InputAdornment))>,
      "onChange": [Function],
      "onKeyUp": [Function],
      "placeholder": "Search for a dashboard",
      "startAdornment": <WithStyles(WithFormControlContext(InputAdornment))
        position="start"
      >
        <pure(SearchIcon) />
      </WithStyles(WithFormControlContext(InputAdornment))>,
      "value": "",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "className": undefined,
        "endAdornment": <WithStyles(WithFormControlContext(InputAdornment))
          position="end"
        >
          <ClearButton
            onClear={[Function]}
          />
        </WithStyles(WithFormControlContext(InputAdornment))>,
        "onChange": [Function],
        "onKeyUp": [Function],
        "placeholder": "Search for a dashboard",
        "startAdornment": <WithStyles(WithFormControlContext(InputAdornment))
          position="start"
        >
          <pure(SearchIcon) />
        </WithStyles(WithFormControlContext(InputAdornment))>,
        "value": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
